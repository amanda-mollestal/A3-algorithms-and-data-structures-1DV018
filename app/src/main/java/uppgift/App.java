/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package uppgift;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.concurrent.Callable;

public class App {

    public static void main(String[] args) {

        quickSortTest();
        quickSortExperiment();

        System.out.println("Testing Directed Graph");
        testGraph(new DirectedGraph());
        System.out.println("Testing Undirected Graph");
        testGraph(new UndirectedGraph());

        DirectedGraph directedGraph = new DirectedGraph();
        directedGraph.addEdge(0, 1, 2.0);
        directedGraph.addEdge(1, 2, 3.0);

        directedGraph.addEdge(2, 3, 1.5);
        directedGraph.addEdge(3, 0, 2.5);
        directedGraph.addEdge(1, 3, 4.0);

        UndirectedGraph undirectedGraph = new UndirectedGraph();
        undirectedGraph.addEdge(0, 1, 2.0);
        undirectedGraph.addEdge(1, 2, 3.0);
        undirectedGraph.addEdge(2, 3, 1.5);
        undirectedGraph.addEdge(3, 0, 2.5);
        undirectedGraph.addEdge(0, 2, 4.0);

        System.out.println("Testing Dijkstra Shortest Path with Directed Graph");
        testDijkstraShortestPath(directedGraph, 0);

        System.out.println("Testing Dijkstra Shortest Path with Undirected Graph");
        testDijkstraShortestPath(undirectedGraph, 0);

    }

    public static void testDijkstraShortestPath(Graph graph, int sourceNode) {
        DijkstraShortestPath dsp = new DijkstraShortestPath(graph, sourceNode);

        for (int v = 0; v < graph.numberOfNodes(); v++) {
            System.out.print("Dijkstra Path from " + sourceNode + " to " + v +
                    " (distance " + String.format("%.2f", dsp.distanceTo(v)) + "): ");

            Iterable<Graph.Edge> path = dsp.pathTo(v);
            if (path != null) {
                for (Graph.Edge e : path) {
                    System.out.print("[From: " + e.from + " To: " + e.to + " Weight: " + e.weight + "] ");
                }
            } else {
                System.out.print("No path found");
            }
            System.out.println("\n");
        }
    }

    public static void testGraph(Graph graph) {

        graph.addEdge(0, 1, 2.0);
        graph.addEdge(1, 2);
        graph.addEdge(2, 3, 3.0);
        graph.addEdge(3, 0);

        System.out.println("Number of nodes: " + graph.numberOfNodes());
        System.out.println("Number of edges: " + graph.numberOfEdges());

        System.out.println("Degree of node 1: " + graph.degree(1));

        graph.removeEdge(1, 2);
        System.out.println("Number of edges after removal: " + graph.numberOfEdges());

        System.out.println("Is there a DFS path from 0 to 3? " + graph.depthFirstPaths(0).hasPathTo(3));
        System.out.println("Is there a BFS path from 0 to 3? " + graph.breadthFirstPaths(0).hasPathTo(3));

        System.out.print("DFS path from 0 to 3: ");
        Iterable<Integer> dfs = graph.depthFirstPaths(0).pathTo(3);
        if (dfs != null) {
            for (int node : dfs) {
                System.out.print(node + " ");
            }
        } else {
            System.out.print("No path found");
        }
        System.out.println();

        System.out.print("BFS path from 0 to 3: ");
        Iterable<Integer> bfs = graph.breadthFirstPaths(0).pathTo(3);
        if (bfs != null) {
            for (int node : bfs) {
                System.out.print(node + " ");
            }
        } else {
            System.out.print("No path found");
        }
        System.out.println();
        System.out.println();

        System.out.println("Iterating over nodes:");
        for (int node : graph.nodes()) {
            System.out.print(node + " ");
        }
        System.out.println();

        System.out.println("Iterating over edges:");
        for (Graph.Edge edge : graph.edges()) {
            System.out.println(edge + " ");
        }

        // Testing neighbors
        System.out.println("Neighbors of node 1:");
        for (int neighbor : graph.neighbors(1)) {
            System.out.print(neighbor + " ");
        }
        System.out.println();
    }

    private static void quickSortExperiment() {

        int maxListSize = 50000;

        int maxDepth = 20; // Maximum depth to test

        List<Integer> testListRandom = generateList(50000, "Random List");
        List<Integer> testListSorted = generateList(50000, "Sorted List");
        List<Integer> testListReverseSorted = generateList(50000, "Reverse Sorted List");
        List<Integer> testListDuplicates = generateList(50000, "List with Duplicates");

        System.out.println("Testing on Random List");
        for (int size = 1000; size <= maxListSize; size = size * 2) {
            System.out.println("List size: " + size);

            testSortingPerformance(size, maxDepth, testListRandom);

            System.out.println();
        }

        System.out.println("Testing on Sorted List");
        for (int size = 1000; size <= maxListSize; size = size * 2) {
            System.out.println("List size: " + size);

            testSortingPerformance(size, maxDepth, testListSorted);

            System.out.println();
        }

        System.out.println("Testing on Reverse Sorted List");
        for (int size = 1000; size <= maxListSize; size = size * 2) {
            System.out.println("List size: " + size);

            testSortingPerformance(size, maxDepth, testListReverseSorted);

            System.out.println();
        }

        System.out.println("Testing on List with Duplicates");
        for (int size = 1000; size <= maxListSize; size = size * 2) {
            System.out.println("List size: " + size);

            testSortingPerformance(size, maxDepth, testListDuplicates);

            System.out.println();
        }
    }

    private static void testSortingPerformance(int size, int maxDepth, List<Integer> testList) {

        int runs = 5; // Number of runs
        int iterations = 10; // Number of iterations per run

        System.out.println("");

        for (int depth = 0; depth <= maxDepth; depth++) {
            System.out.println("Depth " + depth + ":");
            MethodTimer timer = new MethodTimer();

            int depthValue = depth;

            Callable<Void> sortTask = () -> {
                QuickSort quickSort = new QuickSort();
                quickSort.sort(new ArrayList<>(testList.subList(0, size)), depthValue);
                return null;
            };

            try {
                timer.measure(sortTask, runs, iterations);
            } catch (Exception e) {
                System.err.println("Error during timing: " + e.getMessage());
            }

        }
    }

    private static List<Integer> generateList(int size, String listType) {
        List<Integer> list = new ArrayList<>();
        switch (listType) {
            case "Random List":
                return generateRandomList(size, 1000);
            case "Sorted List":
                for (int i = 0; i < size; i++) {
                    list.add(i);
                }
                return list;
            case "Reverse Sorted List":
                for (int i = size; i > 0; i--) {
                    list.add(i);
                }
                return list;
            case "List with Duplicates":
                return generateRandomList(size, Math.max(size / 10, 1));
            default:
                return generateRandomList(size, 1000);
        }
    }

    private static void quickSortTest() {
        List<Integer> testList = generateRandomList(100, 1000);
        QuickSort quickSort = new QuickSort();

        quickSort.sort(testList, 10);

        if (isSorted(testList)) {
            System.out.println("The list is correctly sorted.");
        } else {
            System.out.println("The list is not correctly sorted.");
        }

    }

    private static List<Integer> generateRandomList(int size, int bound) {
        Random rand = new Random();
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < size; i++) {
            list.add(rand.nextInt(bound));
        }
        return list;
    }

    private static boolean isSorted(List<Integer> list) {
        for (int i = 0; i < list.size() - 1; i++) {
            if (list.get(i) > list.get(i + 1)) {
                return false;
            }
        }
        return true;
    }
}

